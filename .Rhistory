library(dplyr)
library(leaflet)
data <- read.csv('referendum_alt_emporda.csv', encoding = 'UTF-8')
data <- data %>% transform(share = Voted/Census) %>% rename(city=X.U.FEFF.City)
data %>% leaflet() %>% addTiles() %>% addCircles(weight=1, radius=(data$share)**0.5*100, label = data$city)
library(dplyr)
library(leaflet)
data <- read.csv('referendum_alt_emporda.csv', encoding = 'UTF-8')
data <- data %>% transform(share = Voted/Census) %>% rename(city=X.U.FEFF.City)
data %>% leaflet() %>% addTiles() %>% addCircles(weight=1, radius=(data$share)**0.5*100000, label = data$city)
library(dplyr)
library(leaflet)
data <- read.csv('referendum_alt_emporda.csv', encoding = 'UTF-8')
data <- data %>% transform(share = Voted/Census) %>% rename(city=X.U.FEFF.City)
data %>% leaflet() %>% addTiles() %>% addCircles(weight=1, radius=(data$share)**0.5*10000, label = data$city)
library(dplyr)
library(leaflet)
data <- read.csv('referendum_alt_emporda.csv', encoding = 'UTF-8')
data <- data %>% transform(share = Voted/Census) %>% rename(city=X.U.FEFF.City)
data %>% leaflet() %>% addTiles() %>% addCircles(weight=1, radius=(data$share)**0.5*1000, label = data$city)
data <- data %>% transform(color =if(share > 1,'red','blue'))
data <- data %>% transform(color =ifelse(share > 1,'red','blue'))
library(dplyr)
library(leaflet)
data <- read.csv('referendum_alt_emporda.csv', encoding = 'UTF-8')
data <- data %>% transform(share = Voted/Census) %>% transform(color =ifelse(share > 1,'red','blue')) %>% rename(city=X.U.FEFF.City)
data %>% leaflet() %>% addTiles() %>% addCircles(weight=1, radius=(data$share)**0.5*1000, label = data$city)
library(dplyr)
library(leaflet)
data <- read.csv('referendum_alt_emporda.csv', encoding = 'UTF-8')
data <- data %>% transform(share = Voted/Census) %>% transform(color =ifelse(share > 1,'red','blue')) %>% rename(city=X.U.FEFF.City)
data %>% leaflet() %>% addTiles() %>% addCircles(weight=1, radius=(data$share)**0.5*1000, label = data$city, color=data$color)
library(dplyr)
library(leaflet)
data <- read.csv('referendum_alt_emporda.csv', encoding = 'UTF-8')
data <- data %>% transform(share = Voted/Census) %>% transform(color =ifelse(share > 1,'red','blue')) %>% rename(city=X.U.FEFF.City)
data %>% leaflet() %>% addTiles() %>% addCircles(weight=1, radius=(data$census)**0.5*30, label = data$city, color=data$color)
library(dplyr)
library(leaflet)
data <- read.csv('referendum_alt_emporda.csv', encoding = 'UTF-8')
data <- data %>% transform(share = Voted/Census) %>% transform(color =ifelse(share > 1,'red','blue')) %>% rename(city=X.U.FEFF.City)
data %>% leaflet() %>% addTiles() %>% addCircles(weight=1, radius=(data$census)**0.5*300, label = data$city, color=data$color)
library(dplyr)
library(leaflet)
data <- read.csv('referendum_alt_emporda.csv', encoding = 'UTF-8')
data <- data %>% transform(share = Voted/Census) %>% transform(color =ifelse(share > 1,'red','blue')) %>% rename(city=X.U.FEFF.City)
data %>% leaflet() %>% addTiles() %>% addCircles(weight=1, radius=(data$census)**0.5*3000, label = data$city, color=data$color)
library(dplyr)
library(leaflet)
data <- read.csv('referendum_alt_emporda.csv', encoding = 'UTF-8')
data <- data %>% transform(share = Voted/Census) %>% transform(color =ifelse(share > 1,'red','blue')) %>% rename(city=X.U.FEFF.City)
data %>% leaflet() %>% addTiles() %>% addCircles(weight=1, radius=(data$census)**0.5*10000, label = data$city)
library(dplyr)
library(leaflet)
data <- read.csv('referendum_alt_emporda.csv', encoding = 'UTF-8')
data <- data %>% transform(share = Voted/Census) %>% transform(color =ifelse(share > 1,'red','blue')) %>% rename(city=X.U.FEFF.City)
data %>% leaflet() %>% addTiles() %>% addCircles(weight=1, radius=(data$Census)**0.5*10000, label = data$city)
library(dplyr)
library(leaflet)
data <- read.csv('referendum_alt_emporda.csv', encoding = 'UTF-8')
data <- data %>% transform(share = Voted/Census) %>% transform(color =ifelse(share > 1,'red','blue')) %>% rename(city=X.U.FEFF.City)
data %>% leaflet() %>% addTiles() %>% addCircles(weight=1, radius=(data$Census)**0.5*100, label = data$city)
library(dplyr)
library(leaflet)
data <- read.csv('referendum_alt_emporda.csv', encoding = 'UTF-8')
data <- data %>% transform(share = Voted/Census) %>% transform(color =ifelse(share > 1,'red','blue')) %>% rename(city=X.U.FEFF.City)
data %>% leaflet() %>% addTiles() %>% addCircles(weight=1, radius=(data$Census)**0.5*100, label = data$city)
library(dplyr)
library(leaflet)
data <- read.csv('referendum_alt_emporda.csv', encoding = 'UTF-8')
data <- data %>% transform(share = Voted/Census) %>% transform(color =ifelse(share > 1,'red','blue')) %>% rename(city=X.U.FEFF.City)
data %>% leaflet() %>% addTiles() %>% addCircles(weight=1, radius=(data$Census)**0.5*10, label = data$city)
library(dplyr)
library(leaflet)
data <- read.csv('referendum_alt_emporda.csv', encoding = 'UTF-8')
data <- data %>% transform(share = Voted/Census) %>% transform(color =ifelse(share > 1,'red','blue')) %>% rename(city=X.U.FEFF.City)
data %>% leaflet() %>% addTiles() %>% addCircles(weight=1, radius=(data$Census)**0.5*30, label = data$city)
library(dplyr)
library(leaflet)
data <- read.csv('referendum_alt_emporda.csv', encoding = 'UTF-8')
data <- data %>% transform(share = Voted/Census) %>% transform(color =ifelse(share > 1,'red','blue')) %>% rename(city=X.U.FEFF.City)
data %>% leaflet() %>% addTiles() %>% addCircles(weight=1, radius=(data$Census)**0.5*30, label = data$city, popup = 'Census '+data$census)
library(dplyr)
library(leaflet)
data <- read.csv('referendum_alt_emporda.csv', encoding = 'UTF-8')
data <- data %>% transform(share = Voted/Census) %>% transform(color =ifelse(share > 1,'red','blue')) %>% rename(city=X.U.FEFF.City)
data %>% leaflet() %>% addTiles() %>% addCircles(weight=1, radius=(data$Census)**0.5*30, label = data$city, popup = 'Census '+as.character(data$census))
library(dplyr)
library(leaflet)
data <- read.csv('referendum_alt_emporda.csv', encoding = 'UTF-8')
data <- data %>% transform(share = Voted/Census) %>% transform(color =ifelse(share > 1,'red','blue')) %>% rename(city=X.U.FEFF.City)
data %>% leaflet() %>% addTiles() %>% addCircles(weight=1, radius=(data$Census)**0.5*30, label = data$city, popup = {function(x) 'Census '+as.character(x)}(data$Census))
'Census '+as.character(data$Census[1])
library(dplyr)
library(leaflet)
data <- read.csv('referendum_alt_emporda.csv', encoding = 'UTF-8')
data <- data %>% transform(share = Voted/Census) %>% transform(color =ifelse(share > 1,'red','blue')) %>% rename(city=X.U.FEFF.City)
data %>% leaflet() %>% addTiles() %>% addCircles(weight=1, radius=(data$Census)**0.5*30, label = data$city, popup = paste('Census ',as.character(data$Census)))
library(dplyr)
library(leaflet)
data <- read.csv('referendum_alt_emporda.csv', encoding = 'UTF-8')
data <- data %>% transform(share = Voted/Census) %>% transform(color =ifelse(share > 1,'red','blue')) %>% rename(city=X.U.FEFF.City)
data %>% leaflet() %>% addTiles() %>% addCircles(weight=1, radius=(data$Census)**0.5*30, label = paste(data$city,'\nCensus ',as.character(data$Census)))
library(dplyr)
library(leaflet)
data <- read.csv('referendum_alt_emporda.csv', encoding = 'UTF-8')
data <- data %>% transform(share = Voted/Census) %>% transform(color =ifelse(share > 1,'red','blue')) %>% rename(city=X.U.FEFF.City)
data %>% leaflet() %>% addTiles() %>% addCircles(weight=1, radius=(data$Census)**0.5*30, label = paste(data$city,sep = "\n",paste('Census ',as.character(data$Census))))
library(dplyr)
library(leaflet)
data <- read.csv('referendum_alt_emporda.csv', encoding = 'UTF-8')
data <- data %>% transform(share = Voted/Census) %>% transform(color =ifelse(share > 1,'red','blue')) %>% rename(city=X.U.FEFF.City)
data %>% leaflet() %>% addTiles() %>% addCircles(weight=1, radius=(data$Census)**0.5*30, label = paste(data$city,sep = ":",paste(' Census ',as.character(data$Census))))
library(dplyr)
library(leaflet)
data <- read.csv('referendum_alt_emporda.csv', encoding = 'UTF-8')
data <- data %>% transform(share = Voted/Census) %>% transform(color =ifelse(share > 1,'red','blue')) %>% rename(city=X.U.FEFF.City)
data %>% leaflet() %>% addTiles() %>% addCircles(weight=1, radius=(data$Census)**0.5*30, fillColor=data$color, label = paste(data$city,sep = ":",paste(' Census ',as.character(data$Census)))) %>% addLegend(labels = c('Share of votine Yes <=1','share of voting Yes > 1'), colors = c("blue", "red"))
library(dplyr)
library(leaflet)
data <- read.csv('referendum_alt_emporda.csv', encoding = 'UTF-8')
data <- data %>% transform(share = Voted/Census) %>% transform(color =ifelse(share > 1,'black','white')) %>% rename(city=X.U.FEFF.City)
data %>% leaflet() %>% addTiles() %>% addCircles(weight=1, radius=(data$Census)**0.5*30, fillColor=data$color, label = paste(data$city,sep = ":",paste(' Census ',as.character(data$Census)))) %>% addLegend(labels = c('Share of voting "Yes" <=1','Share of voting "Yes" > 1'), colors = c("white", "black"))
library(dplyr)
library(leaflet)
data <- read.csv('referendum_alt_emporda.csv', encoding = 'UTF-8')
data <- data %>% transform(share = Voted/Census) %>% transform(color =ifelse(share > 1,'black','blue')) %>% rename(city=X.U.FEFF.City)
data %>% leaflet() %>% addTiles() %>% addCircles(weight=1, radius=(data$Census)**0.5*30, fillOpacity = 0.5, fillColor=data$color, label = paste(data$city,sep = ":",paste(' Census ',as.character(data$Census)))) %>% addLegend(labels = c('Share of voting "Yes" <=1','Share of voting "Yes" > 1'), colors = c("blue", "black"))
library(dplyr)
library(leaflet)
data <- read.csv('referendum_alt_emporda.csv', encoding = 'UTF-8')
data <- data %>% transform(share = Voted/Census) %>% transform(color =ifelse(share > 1,'black','blue')) %>% rename(city=X.U.FEFF.City)
data %>% leaflet() %>% addTiles() %>% addCircles(weight=1, radius=(data$Census)**0.5*30, fillOpacity = 0.35, fillColor=data$color, label = paste(data$city,sep = ":",paste(' Census ',as.character(data$Census)))) %>% addLegend(labels = c('Share of voting "Yes" <=1','Share of voting "Yes" > 1'), colors = c("blue", "black"))
library(dplyr)
library(leaflet)
data <- read.csv('referendum_alt_emporda.csv', encoding = 'UTF-8')
data <- data %>% transform(share = Voted/Census) %>% transform(color =ifelse(share > 1,'red','blue')) %>% rename(city=X.U.FEFF.City)
data %>% leaflet() %>% addTiles() %>% addCircles(weight=1, radius=(data$Census)**0.5*30, fillOpacity = 0.35, fillColor=data$color, label = paste(data$city,sep = ":",paste(' Census ',as.character(data$Census)))) %>% addLegend(labels = c('Share of voting "Yes" <=1','Share of voting "Yes" > 1'), colors = c("blue", "red"))
library(dplyr)
library(leaflet)
data <- read.csv('referendum_alt_emporda.csv', encoding = 'UTF-8')
data <- data %>% transform(share = Voted/Census) %>% transform(color =ifelse(share > 1,'red','blue')) %>% rename(city=X.U.FEFF.City)
data %>% leaflet() %>% addTiles() %>% addCircles(weight=1, radius=(data$Census)**0.5*30, fillOpacity = 0.35, fillColor=data$color, label = paste(data$city,sep = ":",paste(' Census ',as.character(data$Census)))) %>% addLegend(labels = c('Share of voting "Yes" <= 100% of Census','Share of voting "Yes" > 100% of Census', 'Sixe of circles is proportional to Census'), colors = c("blue", "red", 'transparent'))
library(dplyr)
library(leaflet)
data <- read.csv('referendum_alt_emporda.csv', encoding = 'UTF-8')
data <- data %>% transform(share = Voted/Census) %>% transform(color =ifelse(share > 1,'red','blue')) %>% rename(city=X.U.FEFF.City)
data %>% leaflet() %>% addTiles() %>% addCircles(weight=1, radius=(data$Census)**0.5*30, fillOpacity = 0.35, fillColor=data$color, label = paste(data$city,sep = ":",paste(' Census ',as.character(data$Census)))) %>% addLegend(labels = c('Share of voting "Yes" <= 100% of Census','Share of voting "Yes" > 100% of Census', 'Size of the circles is proportional to Census'), colors = c("blue", "red", 'transparent'))
library(dplyr)
library(leaflet)
data <- read.csv('referendum_alt_emporda.csv', encoding = 'UTF-8')
data <- data %>% transform(share = Voted/Census) %>% transform(color =ifelse(share > 1,'red','blue')) %>% rename(city=X.U.FEFF.City)
data %>% leaflet() %>% addTiles() %>% addCircles(weight=1, radius=(data$Census)**0.5*30, fillOpacity = 0.35, fillColor=data$color, label = paste(data$city,sep = ":",paste(' Census ',as.character(data$Census)))) %>% addLegend(labels = c('Share of voting "Yes" <= 100% of Census','Share of voting "Yes" > 100% of Census', 'Size of the circles is proportional to Census'), colors = c("blue", "red", 'transparent'))
library(dplyr)
library(leaflet)
??"exponential distribution"
pexp(1/3, 3, lower.tail = T)
??"uniform distribution"
((4*0+8)+(4*2+10))/2
9+25
34+2*(5+1*(-2))
34+2*(-5-1*(-2))
pexp(1/3,3)
1-pexp(1/3,3)
install.packages('rsconnect')
library(rsconnect)
rsconnect::setAccountInfo(name='ksenia-cadaques',
token='A1603B2DD7F4F21CD66C0274B773EF7F',
secret='<SECRET>')
rsconnect::setAccountInfo(name='ksenia-cadaques',
token='A1603B2DD7F4F21CD66C0274B773EF7F',
secret='FkjPTwwcQy+I9O9LSQ5Jb7RWRRT6mUGrjGyKa4CV')
library(statsr)
library(dplyr)
library(shiny)
library(ggplot2)
data(ames)
ggplot(data = ames, aes(x = area)) +
geom_histogram(binwidth = 250)
ames %>%
summarise(mu = mean(area), pop_med = median(area),
sigma = sd(area), pop_iqr = IQR(area),
pop_min = min(area), pop_max = max(area),
pop_q1 = quantile(area, 0.25),  # first quartile, 25th percentile
pop_q3 = quantile(area, 0.75))  # third quartile, 75th percentile
samp1 <- ames %>%
sample_n(size = 50)
# type your code for the Exercise here, and Run Document
ggplot(data = samp1, aes(x = area)) +
geom_histogram(binwidth = 250)
samp1 %>%
summarise(samp_mean = mean(area), samp_med = median(area),
samp_sd = sd(area), samp_iqr = IQR(area),
samp_min = min(area), samp_max = max(area),
samp_q1 = quantile(area, 0.25),  # first quartile, 25th percentile
samp_q3 = quantile(area, 0.75))  # third quartile, 75th percentile
samp1 %>%
summarise(x_bar = mean(area))
ames %>%
sample_n(size = 50) %>%
summarise(x_bar = mean(area))
sample_means50 <- ames %>%
rep_sample_n(size = 50, reps = 15000, replace = TRUE) %>%
summarise(x_bar = mean(area))
ggplot(data = sample_means50, aes(x = x_bar)) +
geom_histogram(binwidth = 20)
# type your code for the Exercise here, and Run Document
sample_means50 %>%
summarise(sampl_mean = mean(x_bar), sampl_med = median(x_bar),
sampl_sd = sd(x_bar), sampl_iqr = IQR(x_bar),
sampl_min = min(x_bar), sampl_max = max(x_bar),
sampl_q1 = quantile(x_bar, 0.25),  # first quartile, 25th percentile
sampl_q3 = quantile(x_bar, 0.75))  # third quartile, 75th percentile
ames %>%
sample_n(size = 50) %>%
summarise(x_bar = mean(area))
# type your code for the Exercise here, and Run Document
sample_means_small <- ames %>%
rep_sample_n(size = 10, reps = 25, replace = TRUE) %>%
summarise(x_bar = mean(area))
# type your code for Question 3 here, and Run Document
nrow(sample_means_small)
shinyApp(
ui <- fluidPage(
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("selected_var",
"Variable:",
choices = list("area", "price"),
selected = "area"),
numericInput("n_samp",
"Sample size:",
min = 1,
max = nrow(ames),
value = 30),
numericInput("n_sim",
"Number of samples:",
min = 1,
max = 30000,
value = 15000)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("sampling_plot"),
verbatimTextOutput("sampling_mean"),
verbatimTextOutput("sampling_se")
)
)
),
# Define server logic required to draw a histogram
server <- function(input, output) {
# create sampling distribution
sampling_dist <- reactive({
ames[[input$selected_var]] %>%
sample(size = input$n_samp * input$n_sim, replace = TRUE) %>%
matrix(ncol = input$n_samp) %>%
rowMeans() %>%
data.frame(x_bar = .)
#ames %>%
#  rep_sample_n(size = input$n_samp, reps = input$n_sim, replace = TRUE) %>%
#  summarise_(x_bar = mean(input$selected_var))
})
# plot sampling distribution
output$sampling_plot <- renderPlot({
x_min <- quantile(ames[[input$selected_var]], 0.1)
x_max <- quantile(ames[[input$selected_var]], 0.9)
ggplot(sampling_dist(), aes(x = x_bar)) +
geom_histogram() +
xlim(x_min, x_max) +
ylim(0, input$n_sim * 0.35) +
ggtitle(paste0("Sampling distribution of mean ",
input$selected_var, " (n = ", input$n_samp, ")")) +
xlab(paste("mean", input$selected_var)) +
theme(plot.title = element_text(face = "bold", size = 16))
})
# mean of sampling distribution
output$sampling_mean <- renderText({
paste0("mean of sampling distribution = ", round(mean(sampling_dist()$x_bar), 2))
})
# mean of sampling distribution
output$sampling_se <- renderText({
paste0("SE of sampling distribution = ", round(sd(sampling_dist()$x_bar), 2))
})
},
options = list(height = 500)
)
??"confidence intervals"
0.47*(1-0.47)
0.47-sqrt(0.47*(1-0.47))*qnorm(0.975)
0.47-sqrt(0.47*(1-0.47)/100)*qnorm(0.975)
0.47+sqrt(0.47*(1-0.47)/100)*qnorm(0.975)
1/mean(2+2.5+4.1+1.8+4)
mean(−1.2,0.5,0.8,−0.3)
5/(2.0+2.5+4.1+1.8+4.0)
(-1.2+0.5+0.8-0.3)/4
library(dplyr)
library(statsr)
load("ames_train.Rdata")
library(dplyr)
library(statsr)
ames_train %>% is.na() %>% sum()
ames_train %>% fis.na(.) %>% summarize_each()
ames_train %>% is.na(.) %>% summarize_each()
ames_train %>% is.na() %>% summarize_each()
ames_train %>% is.na() %>% summarize_all()
ames_train %>% is.na(.) %>% summarize_all()
colSums(is.na(ames_train))
# type your code for Question 2 here, and Knit
str(ames_train)
ames_train %>% ames_train %>% mutate(MS.Subclass = factor(MS.Subclass, Overall.Qual = factor(Overall.Qual), Overall.Cond = factor(Overall.Cond)))
ames_train <- ames_train %>% mutate(MS.Subclass = factor(MS.Subclass, Overall.Qual = factor(Overall.Qual), Overall.Cond = factor(Overall.Cond)))
ames_train <- ames_train %>% mutate(MS.Subclass = factor(MS.Subclass), Overall.Qual = factor(Overall.Qual), Overall.Cond = factor(Overall.Cond))
load("ames_train.Rdata")
ames_train <- ames_train %>% mutate(MS.Subclass = factor(MS.Subclass), Overall.Qual = factor(Overall.Qual), Overall.Cond = factor(Overall.Cond))
load("ames_train.Rdata")
ames_train <- ames_train %>% mutate(MS.SubClass = factor(MS.SubClass), Overall.Qual = factor(Overall.Qual), Overall.Cond = factor(Overall.Cond))
# type your code for Question 3 here, and Knit
ames_train %>% group_by(Neighborhood) %>% select(StoneBr, Timber, Veenker, NridgHt) %>% std()
# type your code for Question 3 here, and Knit
ames_train %>% group_by(Neighborhood) %>% summarize(StoneBr, Timber, Veenker, NridgHt) %>% std()
# type your code for Question 3 here, and Knit
ames_train %>% group_by(Neighborhood) %>% summarize(std(price))
??"standard deviation"
# type your code for Question 3 here, and Knit
ames_train %>% group_by(Neighborhood) %>% summarize(sd(price))
load("ames_train.Rdata")
ames_train <- ames_train %>% mutate(MS.SubClass = factor(MS.SubClass), Overall.Qual = factor(Overall.Qual), Overall.Cond = factor(Overall.Cond))
# type your code for Question 4 here, and Knit
ggplot(ames_train, aes(x=Lot.Area, y = price)) + geom_point()
library(dplyr)
library(statsr)
library(ggplot2)
# type your code for Question 4 here, and Knit
ggplot(ames_train, aes(x=Lot.Area, y = price)) + geom_point()
ggplot(ames_train, aes(x=Bedroom.AbvGr, y = price)) + geom_point()
ggplot(ames_train, aes(x=Overall.Qual, y = price)) + geom_point()
ggplot(ames_train, aes(x=Year.Built, y = price)) + geom_point()
# type your code for Question 5 here, and Knit
ggplot(ames_train, aes(x=area, y = price)) + geom_point()
# type your code for Question 5 here, and Knit
ggplot(ames_train, aes(x=log(area), y = price)) + geom_point()
# type your code for Question 5 here, and Knit
ggplot(ames_train, aes(x=area, y = log(price))) + geom_point()
# type your code for Question 5 here, and Knit
ggplot(ames_train, aes(x=log(area), y = log(price))) + geom_point()
# type your code for Question 6 here, and Knit
ames_train %>% group_by(Garage.Type) %>% summarize(count())
# type your code for Question 6 here, and Knit
ames_train %>% group_by(Garage.Type) %>% count()
# type your code for Question 7 here, and Knit
ames_train %>% Year.Built > 1999 %>% sum()
# type your code for Question 7 here, and Knit
ames_train >%> filter(Year.Built > 1999) %> count()
# type your code for Question 7 here, and Knit
ames_train %>% filter(Year.Built > 1999) %>% count()
ames_train %>% summarize(mean(price), median(price))
ames_train %>% group_by(Bsmt.Qual) %>% count()
ames_train %>% group_by(Street) %>% count()
# type your code for Question 9 here, and Knit
ames_train %>% filter(Lot.Area > 2000) > sum()
# type your code for Question 9 here, and Knit
ames_train %>% filter(Lot.Area > 2000)
# type your code for Question 9 here, and Knit
ames_train %>% filter(Lot.Area > 2000) %>% count()
# type your code for Question 9 here, and Knit
ames_train %>% filter(Lot.Area > 2000) %>% summarize(mean(Bedroom.AbvGr))
# type your code for Question 9 here, and Knit
ames_train %>% filter(Lot.Area > 2000) %>% group_by(Bedroom.AbvGr) %>% count
1+7
# type your code for Question 9 here, and Knit
ames_train %>% filter(Lot.Area > 2000) %>% count
# type your code for Question 9 here, and Knit
ames_train %>% filter(Lot.Area > 2000) %>% group_by(Bedroom.AbvGr) %>% count
0*2+41*1+266*2+524*3+122*4+14*5+6*9
# type your code for Question 9 here, and Knit
ames_train %>% filter(Lot.Area > 2000) %>% count
# type your code for Question 9 here, and Knit
ames_train %>% filter(Lot.Area > 2000) %>% group_by(Bedroom.AbvGr) %>% count
# type your code for Question 9 here, and Knit
ames_train %>% filter(area > 2000) %>% group_by(Bedroom.AbvGr) %>% count
1*2+6*2+53*3+61*4+12*5+6*4
# type your code for Question 9 here, and Knit
ames_train %>% filter(area > 2000) %>%  count
# type your code for Question 9 here, and Knit
ames_train %>% filter(area > 2000) %>% group_by(Bedroom.AbvGr) %>% count
# type your code for Question 8 here, and Knit
ames_train %>% filter(!isna(Garage.Type)) %>% mean(area)
# type your code for Question 8 here, and Knit
ames_train %>% filter(!is.na(Garage.Type)) %>% mean(area)
# type your code for Question 8 here, and Knit
ames_train %>% filter(!is.na(Garage.Type)) %>% summarize(mean(area))
ames_train %>% filter(is.na(Garage.Type)) %>% summarize(mean(area))
# type your code for Question 8 here, and Knit
gn = is.na(ames_train$Garage.Type)
s_gn = ames_train[gn,]$area
s_gy = ames_train[!gn,]$area
t.test(s_gy, s_gn)
# type your code for Question 10 here, and Knit
ames_train %>%filter((log(price) < 9)|((log(price)>12)&(log(area)>8.4)))
# type your code for Question 10 here, and Knit
ames_train %>%filter((log(price) < 9)|((log(price)>12)&(log(area)>8.3)))
# type your code for Question 10 here, and Knit
ames_train %>%filter((log(price) < 9)|((log(price)>12)&(log(area)>8)))
# type your code for Question 5 here, and Knit
ggplot(ames_train, aes(x=log(area), y = log(price))) + geom_point()
# type your code for Question 10 here, and Knit
ames_train %>%filter((log(price) < 9)|((log(price)>12)&(log(area)>8.25)))
# type your code for Question 10 here, and Knit
ames_train %>%filter((log(price) < 9))
# type your code for Question 10 here, and Knit
ames_train %>%filter((log(price) < 10))
# type your code for Question 10 here, and Knit
ames_train %>%filter((log(price) < 10)|((log(price)>12)&(log(area)>8.25)))
# type your code for Question 10 here, and Knit
ames_train %>%filter((log(price) < 10)|((log(price)>12)&(log(area)>8.25))|
((log(price)><11.75)&(log(area)>7)))
# type your code for Question 10 here, and Knit
ames_train %>%filter((log(price) < 10)|((log(price)>12)&(log(area)>8.25))|
((log(price)<11.75)&(log(area)>7)))
# type your code for Question 10 here, and Knit
ames_train %>%filter((log(price) < 10)|((log(price)>12)&(log(area)>8.25))|
((log(price)<11.70)&(log(area)>7)))
# type your code for Question 10 here, and Knit
ames_train %>%filter((log(price) < 10)|((log(price)>12)&(log(area)>8.25)))
# type your code for Question 10 here, and Knit
lmap <- lm(log(ames_train$area)~log(ames_train$price))
plot(lmap)
ames_train[c(276,310,428),]
ames_train[c(276,310,428),c('Overall.Qual','Sale.Condition','Year.Built', 'Bedroom.AbvGr')]
sort(lmap$residuals)[1:3]
sort(lmap$residuals)[c(1,2,3,998,999,100)]
sort(lmap$residuals)[c(1,2,3,998,999,1000)]
# type your code for Question 11 here, and Knit
hist(ames_train$price)
# type your code for Question 12 here, and Knit
ames_train %>% group_by(Neighborhood, Bldg.Type) %>% count
# type your code for Question 12 here, and Knit
ames_train %>% group_by(Bldg.Type, Neighborhood)
# type your code for Question 12 here, and Knit
ames_train %>% group_by(Bldg.Type, Neighborhood) %>% count
# type your code for Question 12 here, and Knit
ames_train %>% group_by(Neighborhood, Bldg.Type) %>% count
# type your code for Question 13 here, and Knit
ggplot(ames_train, aes(x=log(area), y = Bedroom.AbvGr)) + geom_point()
# type your code for Question 14 here, and Knit
ames_train %>% filter(!is.na(Bsmt.Unf.SF)) %>%summarize(mean(Bsmt.Unf.SF))
# type your code for Question 14 here, and Knit
ames_train %>% filter(BsmtFin.Type.1=='Unf') %>%summarize(mean(Bsmt.Unf.SF))
# type your code for Question 14 here, and Knit
ames_train %>% filter(BsmtFin.Type.1=='Unf') %>%summarize(mean(Bsmt.Unf.SF, na.rm=TRUE))
install.packages('grid')
install.packages('png')
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
shiny::runApp('Studies/Coursera/Data Science/09 Developing data products/project')
runApp('Studies/Coursera/Data Science/09 Developing data products/project')
runApp('Studies/Coursera/Data Science/09 Developing data products/project')
load("ames_train.Rdata")
library(MASS)
library(dplyr)
library(ggplot2)
# type your code for Question 1 here, and Knit
ames_train = ames_train %>% transform(Age = 2018 - Year.Built)
hist(ames_train$Age)
# type your code for Question 2 here, and Knit
ames_train %>% group_by(Neighborhood) %>% summarise(MeanPrice = mean(price), MedianPrice =median(price), SDPrice = sd(price))
# type your code for Question 2 here, and Knit
ames_train %>% group_by(Neighborhood) %>% summarise(MeanPrice = mean(price)) %>% order_by(MeanPrice)
# type your code for Question 2 here, and Knit
ames_train %>% group_by(Neighborhood) %>% summarise(MeanPrice = mean(price)) %>% arrange(MeanPrice)
# type your code for Question 2 here, and Knit
ames_train %>% group_by(Neighborhood) %>% summarise(MeanPrice = mean(price)) %>% arrange(MeanPrice)
# type your code for Question 2 here, and Knit
ames_train %>% group_by(Neighborhood) %>% summarise(MedianPrice = median(price)) %>% arrange(MedianPrice)
# type your code for Question 2 here, and Knit
ames_train %>% group_by(Neighborhood) %>% summarise(SDPrice = sd(price)) %>% arrange(SDPrice)
# type your code for Question 3 here, and Knit
str(ames_train)
# type your code for Question 3 here, and Knit
describe(ames_train)
# type your code for Question 3 here, and Knit
summary(ames_train)
# type your code for Question 3 here, and Knit
library(Hmisc)
install.packages(Hmisc)
install.packages('Hmisc')
# type your code for Question 3 here, and Knit
#library(Hmisc)
sum(is.na(ames_train))
# type your code for Question 3 here, and Knit
library(Hmisc)
describe(ames_train)
# type your code for Question 3 here, and Knit
ames_train %>% summarise(sum(is.na(all_vars()))
# type your code for Question 3 here, and Knit
ames_train %>% summarise(sum(is.na(all_vars())))
# type your code for Question 3 here, and Knit
ames_train %>% sapply(is.na) %>% sapply(sum)
# type your code for Question 3 here, and Knit
sapply(ames_data, is.na)
# type your code for Question 3 here, and Knit
sapply(ames_train, is.na)
# type your code for Question 3 here, and Knit
sapply(is.na(ames_train), sum)
# type your code for Question 3 here, and Knit
colSums(is.na(ames_train))
shiny::runApp('Studies/Coursera/Data Science/09 Developing data products/project')
runApp('Studies/Coursera/Data Science/09 Developing data products/project')
runApp('Studies/Coursera/Data Science/09 Developing data products/project')
runApp('Studies/Coursera/Data Science/09 Developing data products/project')
shiny::runApp('Studies/Coursera/Data Science/09 Developing data products/project')
